
dataType reference {
    baseType: string;
    pattern: '[A-Za-z0-9_\-]+';
}

dataType uei {
    baseType: string;
    pattern: '(question|explainer|lesson_video|question_video|lesson|scope|image)/[A-Za-z0-9_\-]+';
}

dataType timestamp {
    baseType: string;
    pattern: '\d{4}\-\d{2}\-\d{2}T\d{2}:\d{2}:\d{2}';
}

dataType emailAddress {
    baseType: string;
}

dataType priority {
    baseType: string;
    allowedValues: 'very_high', 'high', 'low', 'very_low';
}

dataType xmlFileName {
    baseType: string;
    pattern: '[A-Za-z0-9\._\-]+\.xml'
}

dataType actionType {
    baseType: string;
    allowedValues:  'created_entity', 
                    'created_new_version', 
                    'changed_workflow', 
                    'changed_workflow_status', 
                    'changed_assignee', 
                    'changed_priority', 
                    'added_comment', 
                    'added_label', 
                    'removed_label', 
                    'added_watcher', 
                    'removed_watcher';
}

attribute for_content_entity {
    valueType: uei;
}

root element history {
    attributes: for_content_entity;
    allowedContent: elements only;
    subelements: [ state, actions ];
}

element state {
    allowedContent: elements only;
    subelements: [ workflow, workflow_status, developers, assignee, priority, labels, watchers, versions ];
}

element workflow {
    allowedContent: text only;
    valueType: reference;
}

element workflow_status {
    allowedContent: text only;
    valueType: reference;
}

element developers {
    allowedContent: elements only;
    subelements: [ developer (n >= 0) ];
}

attribute workflow2 {
    tagName: 'workflow';
    valueType: reference;
}

attribute role {
    valueType: reference;
}

element developer {
    attributes: workflow2, role;
    allowedContent: text only;
    valueType: emailAddress;
}

element assignee {
    allowedContent: text only;
    valueType: emailAddress;
}

element priority {
    allowedContent: text only;
    valueType: priority;
}

element labels {
    allowedContent: elements only;
    subelements: [ label (n >= 0) ];
}

element label {
    allowedContent: text only;
}

element watchers {
    allowedContent: elements only;
    subelements: [ watcher (n >= 0) ];
}

element watcher {
    allowedContent: text only;
    valueType: emailAddress;
}

element versions {
    allowedContent: elements only;
    subelements: [ version (n >= 0) ];
}

attribute file_name {
    valueType: xmlFileName;
}

element version {
    attributes: file_name;
    allowedContent: text only;
    valueType: integer;
}

element actions {
    allowedContent: elements only;
    subelements: [ action (n >= 0) ];
}

attribute taken_at {
    valueType: timestamp;
}

attribute taken_by {
    valueType: emailAddress;
}

attribute type {
    valueType: actionType;
}

element action {
    attributes: taken_at, taken_by, type;
    allowedContent: elements only;
    subelements: [ version2 (optional), 
                 file_name (optional), 
                 new_workflow (optional), 
                 transition (optional), 
                 new_workflow_status (optional), 
                 new_assignee (optional), 
                 new_priority (optional), 
                 comment_reference (optional), 
                 comment_text (optional), watcher 
                 (optional), 
                 label (optional) ];
}

element version2 {
    tagName: 'version';
    allowedContent: text only;
    valueType: integer;
}

element file_name {
    allowedContent: text only;
    valueType: xmlFileName;
}

element new_workflow {
    allowedContent: text only;
    valueType: reference;
}

element new_workflow_status {
    allowedContent: text only;
    valueType: reference;
}

element transition {
    allowedContent: text only;
}

element new_assignee {
    allowedContent: text only;
    valueType: emailAddress;
}

element new_priority {
    allowedContent: text only;
    valueType: priority;
}

element comment_reference {
    allowedContent: text only;
    valueType: reference;
}

element comment_text {
    allowedContent: text only;
}